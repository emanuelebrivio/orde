extends base/layout

block title
  | Welcome to newborn

//-block links

block app
  .page
    .spacer-100
    .container
      h1 Orde
        small(style='color: lightgray;') JS
      
      p.label Drag letters to compose the word
    
      .spacer-20
      
      #orde_1(data-word='social')
        ul.decomposed
        span.result
      
      .spacer-20
      
      #orde_2(data-word='stylus')
        ul.decomposed
        span.result
      
      .spacer-20
      
      #orde_3(data-word='plasticpanda')
        ul.decomposed
        span.result
      
      .spacer-60
      
      button.pure-button#shuffle
        span Shuffle
      
      
      
block scripts
  script.
    (function () {
    
      'use strict';

      NodeList.prototype.forEach = Array.prototype.forEach;
      HTMLCollection.prototype.forEach = Array.prototype.forEach;

      NodeList.prototype.on = function (event, listener) {
        this.forEach(function (el) {
          el.addEventListener(event, listener);
        });
      };
      
      
      /* Shuffle: use this function to sort the list */
      var shuffleFn = function (listEl) {
        for (var i = listEl.children.length; i >= 0; i--) {
          listEl.appendChild(listEl.children[Math.random() * i | 0]);
        }
      };
      
      /* Init: initial setup for every game */
      var initOrde = function (o) {
        // o is the node containing ul.decomposed and span.result
        var list = o.querySelector('.decomposed');
        var result = o.querySelector('.result');
        var toFind = o.getAttribute('data-word');
        o.removeAttribute('data-word');
        
        // Append each letter to the list
        toFind.split('').forEach(function (letter) {
          var li = document.createElement('li');
          li.textContent = letter;
          list.appendChild(li);
        });
        
        // Shuffle the list to get a random order
        shuffleFn(list);
        
        // Start the Sortable plugin for the current list
        var sortable = Sortable.create(list, {
          ghostClass: 'decomposed-ghost',
          onSort: function () {
            var word = '';

            list.querySelectorAll('li').forEach(function (li) {
              word = word + li.textContent;
            });
            
            // Check the word
            if (word == toFind) {
              result.textContent = 'Hooray!'
              result.classList.add('okay');
            } else {
              result.textContent = 'Not yet...';
              result.classList.remove('okay');
            }
          }
        });
        
        
      };
      
      
      initOrde(document.getElementById('orde_1'));
      initOrde(document.getElementById('orde_2'));
      initOrde(document.getElementById('orde_3'));
      
      
      document.getElementById('shuffle').addEventListener('click', function () {
        document.querySelectorAll('ul.decomposed').forEach(function (ordeList) {
          shuffleFn(ordeList);
        });
        document.querySelectorAll('span.result').forEach(function (ordeResult) {
          ordeResult.textContent = '';
          ordeResult.classList.remove('okay');
        });
      });
      
    })();